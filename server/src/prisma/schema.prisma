generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and authentication models
model User {
  id             String        @id @default(cuid())
  name           String  
  email          String        @unique
  passwordHash   String?
  role           Role          @default(ADMIN)
  isVerified     Boolean       @default(false)
  team           Team?         @relation(fields: [teamId], references: [id])
  teamId         String?  
  objectives     Objective[]
  organization   Organization? @relation("UserOrganization")
  organizationId String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([teamId])
  @@index([email])
}

// Organization structure models
model Organization {
  id          String       @id @default(cuid())
  name        String
  departments Department[]
  user        User         @relation("UserOrganization", fields: [userId], references: [id])
  userId      String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Department {
  id             String       @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  teams          Team[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model Team {
  id           String      @id @default(cuid())
  name         String
  department   Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String
  users        User[]
  objectives   Objective[]
  invites      Invite[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([departmentId])
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  otpCode   String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([otpCode])
}

// OKR models
model Objective {
  id          String      @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  progress    Int         @default(0) // 0-100
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  assignedTo  User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  keyResults  KeyResult[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([teamId])
  @@index([userId])
}

model KeyResult {
  id           String          @id @default(cuid())
  title        String
  targetValue  Float
  currentValue Float           @default(0)
  progress     Float           @default(0) // 0-100
  status       KeyResultStatus @default(NOT_STARTED)
  objective    Objective       @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  objectiveId  String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([objectiveId])
}

enum KeyResultStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

// Invitation model
model Invite {
  id         String    @id @default(cuid())
  email      String
  role       Role      @default(MEMBER)
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
  token      String    @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())

  @@index([email])
  @@index([teamId])
  @@index([token])
} 